import socket
import threading
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque

# Create fixed-size deques for storing the latest data points
max_points = 500   # Number of points to display
data_queue = deque(maxlen=max_points)
time_queue = deque(maxlen=max_points)

# Setup the figure and axes for plotting
fig, ax = plt.subplots(figsize=(10, 6))
line, = ax.plot([], [], 'b-', linewidth=2)
ax.set_xlabel('Time')
ax.set_ylabel('Data2 Values')
ax.set_title('Real-time Data2 Plot')
ax.grid(True)

# data_lock = threading.Lock()

def init():
    # Initialize the line
    line.set_data([], [])
    return line,

def animate(i):
    # Update the plot data
    with data_lock:
        x = list(time_queue)
        y = list(data_queue)
    
    # Update the line data
    line.set_data(x, y)
    
    # Adjust the plot limits if necessary
    if len(x) > 0:
        ax.set_xlim(min(x), max(x))
        if len(y) > 0:
            y_min = min(y) - 10
            y_max = max(y) + 10
            ax.set_ylim(y_min, y_max)
    
    return line,

def main():
    
    # Define server address and port
    server_address = '172.20.10.5'  # Replace with the IP address of your ESP32
    server_port = 8080

    # Create a TCP/IP socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        # Connect to the server
        client_socket.connect((server_address, server_port))
        print("Connected to server at {}:{}".format(server_address, server_port))

        # Set up animation before entering data reading loop
        ani = animation.FuncAnimation(fig, animate, init_func=init, interval=100, blit=True, save_count=100)
        
        # Start the plot in non-blocking mode
        plt.ion()
        plt.show()
        
        while True:
            try:
                response = client_socket.recv(1024)
                if not response:
                    print("Server closed connection.")
                    break
                    
                data = {"dists": [], "data2": []}
                for i in range(0, len(response), 8):
                    if i+4 <= len(response):  # Make sure we have enough bytes
                        data["dists"].append(int.from_bytes(response[i:i+4], byteorder='little'))
                        data["data2"].append(int.from_bytes(response[i+4:i+8], byteorder='little'))
                
                print(data)

                # Add data to queues with thread safety
                time_queue.extend(data["data2"])
                data_queue.extend(data["dists"])
                
            except Exception as e:
                print("Error receiving message: ", str(e))
                break  # This break was misplaced in your code
    
    except Exception as e:
        print("Error: ", str(e))
    
    finally:
        # Close the socket connection
        client_socket.close()
        print("Connection closed.")

if __name__ == "__main__":
    main()
